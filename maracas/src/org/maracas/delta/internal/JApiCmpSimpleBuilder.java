package org.maracas.delta.internal;

import io.usethesource.vallang.IValueFactory;
import io.usethesource.vallang.type.Type;
import io.usethesource.vallang.type.TypeFactory;
import io.usethesource.vallang.type.TypeStore;

public class JApiCmpSimpleBuilder {

	private static final TypeFactory typeFactory = TypeFactory.getInstance();
	private final TypeStore typeStore;
	private final IValueFactory valueFactory;
	
	// ADTs
	private final Type apiEntityADT;
	private final Type apiChangeADT;
	private final Type apiChangeStatusADT;
	private final Type entityTypeADT;
	private final Type methodInfoADT;
	private final Type compatibilityChangeADT;
	private final Type compatibilityChangeTypeADT;
	private final Type classTypeADT;
	private final Type modifierADT;
	
	// Constructors
	private final Type apiEntityClass;
	private final Type apiEntityInterface;
	private final Type apiEntityField;
	private final Type apiEntityMethod;
	private final Type apiEntityConstructor;
	private final Type apiEntityAnnotation;
	private final Type apiEntityAnnotationElement;
	private final Type apiEntityException;
	private final Type apiEntityParameter;
	private final Type apiEntityModifier;
	private final Type apiEntitySuperclass;
	private final Type apiChangeNew;
	private final Type apiChangeRemoved;
	private final Type apiChangeUnchanged;
	private final Type apiChangeModified;
	private final Type apiChangeStatusNew;
	private final Type apiChangeStatusRemoved;
	private final Type apiChangeStatusUnchanged;
	private final Type apiChangeStatusModified;
	private final Type entityTypeClass;
	private final Type entityTypeReturn;
	private final Type methodInfo;
	private final Type compatibilityChange;
	private final Type cctAnnotationDeprecatedAdded;
	private final Type cctClassRemoved;
	private final Type cctClassNowAbstract;
	private final Type cctClassNowFinal;
	private final Type cctClassNoLongerPublic;
	private final Type cctClassTypeChanged;
	private final Type cctClassNowCheckedException;
	private final Type cctClassLessAccessible;
	private final Type cctSuperclassRemoved;
	private final Type cctSuperclassAdded;
	private final Type cctSuperclassModifiedIncompatible;
	private final Type cctInterfaceAdded;
	private final Type cctInterfaceRemoved;
	private final Type cctMethodRemoved;
	private final Type cctMethodRemovedInSuperclass;
	private final Type cctMethodLessAccessible;
	private final Type cctMethodLessAccessibleThanInSuperclass;
	private final Type cctMethodIsStaticAndOverridesNotStatic;
	private final Type cctMethodReturnTypeChanged;
	private final Type cctMethodNowAbstract;
	private final Type cctMethodNowFinal;
	private final Type cctMethodNowStatic;
	private final Type cctMethodNoLongerStatic;
	private final Type cctMethodAddedToInterface;
	private final Type cctMethodNowThrowsCheckedException;
	private final Type cctMethodAbstractAddedToClass;
	private final Type cctMethodAbstractAddedInSuperclass;
	private final Type cctMethodAbstractAddedInImplementedInterface;
	private final Type cctMethodNewDefault;
	private final Type cctMethodAbstractNowDefault;
	private final Type cctFieldStaticAndOverridesStatic;
	private final Type cctFieldLessAccessibleThanInSuperclass;
	private final Type cctFieldNowFinal;
	private final Type cctFieldNowStatic;
	private final Type cctFieldNoLongerStatic;
	private final Type cctFieldTypeChanged;
	private final Type cctFieldRemoved;
	private final Type cctFieldRemovedInSuperclass;
	private final Type cctFieldLessAccessible;
	private final Type cctConstructorRemoved;
	private final Type cctConstructorLessAccessible;
	private final Type classTypeAnnotation;
	private final Type classTypeInterface;
	private final Type classTypeClass;
	private final Type classTypeEnum;
	private final Type modifierPublic;
	private final Type modifierPrivate;
	private final Type modifierProtected;
	private final Type modifierPackageProtected;
	private final Type modifierFinal;
	private final Type modifierNonFinal;
	private final Type modifierStatic;
	private final Type modifierNonStatic;
	private final Type modifierAbstract;
	private final Type modifierNonAbstract;
	private final Type modifierSynthetic;
	private final Type modifierNonSynthetic;
	private final Type modifierBridge;
	private final Type modifierNonBridge;
	
	public JApiCmpSimpleBuilder(TypeStore typeStore, IValueFactory valueFactory) {
		this.typeStore = typeStore;
		this.valueFactory = valueFactory;
		
		// ADTs
		this.apiEntityADT = typeFactory.abstractDataType(typeStore, "APIEntity");
		this.apiChangeADT = typeFactory.abstractDataType(typeStore, "APIChange", typeFactory.parameterType("T"));
		this.apiChangeStatusADT = typeFactory.abstractDataType(typeStore, "APIChangeStatus");
		this.entityTypeADT = typeFactory.abstractDataType(typeStore, "EntityType");
		this.methodInfoADT = typeFactory.abstractDataType(typeStore, "MethodInfo");
		this.compatibilityChangeADT = typeFactory.abstractDataType(typeStore, "CompatibilityChange");
		this.compatibilityChangeTypeADT = typeFactory.abstractDataType(typeStore, "CompatibilityChangeType");
		this.classTypeADT = typeFactory.abstractDataType(typeStore, "ClassType");
		this.modifierADT = typeFactory.abstractDataType(typeStore, "Modifier");
		
		// Constructors
		this.apiEntityClass = typeFactory.constructor(typeStore, apiEntityADT, "class", typeFactory.stringType(), entityTypeADT, typeFactory.listType(apiEntityADT), typeFactory.listType(compatibilityChangeADT), apiChangeADT);
		this.apiEntityInterface = typeFactory.constructor(typeStore, apiEntityADT, "interface", typeFactory.stringType(), apiChangeStatusADT);
		this.apiEntityField = typeFactory.constructor(typeStore, apiEntityADT, "field", typeFactory.integerType(), typeFactory.stringType(), typeFactory.listType(apiEntityADT), typeFactory.listType(compatibilityChangeADT), apiChangeStatusADT);
		this.apiEntityMethod = typeFactory.constructor(typeStore, apiEntityADT, "method", typeFactory.stringType(), entityTypeADT, typeFactory.listType(apiEntityADT), typeFactory.listType(compatibilityChangeADT), apiChangeADT);
		this.apiEntityConstructor = typeFactory.constructor(typeStore, apiEntityADT, "constructor", typeFactory.stringType(), typeFactory.listType(apiEntityADT), typeFactory.listType(compatibilityChangeADT), apiChangeADT);
		this.apiEntityAnnotation = typeFactory.constructor(typeStore, apiEntityADT, "annotation", typeFactory.stringType(), typeFactory.listType(apiEntityADT), apiChangeADT);
		this.apiEntityAnnotationElement = typeFactory.constructor(typeStore, apiEntityADT, "annotationElement", typeFactory.stringType(), apiChangeADT);
		this.apiEntityException = typeFactory.constructor(typeStore, apiEntityADT, "exception", typeFactory.stringType(), typeFactory.boolType(), apiChangeStatusADT);
		this.apiEntityParameter = typeFactory.constructor(typeStore, apiEntityADT, "parameter", typeFactory.stringType());
		this.apiEntityModifier = typeFactory.constructor(typeStore, apiEntityADT, "modifier", apiChangeADT);
		this.apiEntitySuperclass = typeFactory.constructor(typeStore, apiEntityADT, "superclass", apiChangeADT);
		this.apiChangeNew = typeFactory.constructor(typeStore, apiChangeADT, "new", typeFactory.parameterType("T"));
		this.apiChangeRemoved = typeFactory.constructor(typeStore, apiChangeADT, "removed", typeFactory.parameterType("T"));
		this.apiChangeUnchanged = typeFactory.constructor(typeStore, apiChangeADT, "unchanged");
		this.apiChangeModified = typeFactory.constructor(typeStore, apiChangeADT, "modified", typeFactory.parameterType("T"), typeFactory.parameterType("T"));
		this.apiChangeStatusNew = typeFactory.constructor(typeStore, apiChangeADT, "new");
		this.apiChangeStatusRemoved = typeFactory.constructor(typeStore, apiChangeADT, "removed");
		this.apiChangeStatusUnchanged = typeFactory.constructor(typeStore, apiChangeADT, "unchanged");
		this.apiChangeStatusModified = typeFactory.constructor(typeStore, apiChangeADT, "modified");
		this.entityTypeClass = typeFactory.constructor(typeStore, entityTypeADT, "classType", apiChangeADT);
		this.entityTypeReturn = typeFactory.constructor(typeStore, entityTypeADT, "returnType", apiChangeADT);
		this.methodInfo = typeFactory.constructor(typeStore, methodInfoADT, "methodInfo", typeFactory.integerType(), typeFactory.stringType());
		this.compatibilityChange = typeFactory.constructor(typeStore, compatibilityChangeADT, "compatibilityChange", compatibilityChangeTypeADT, typeFactory.boolType(), typeFactory.boolType());
		this.cctAnnotationDeprecatedAdded = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "annotationDeprecatedAdded");
		this.cctClassRemoved = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "classRemoved");
		this.cctClassNowAbstract = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "classNowAbstract");
		this.cctClassNowFinal = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "classNowFinal");
		this.cctClassNoLongerPublic = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "classNoLongerPublic");
		this.cctClassTypeChanged = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "classTypeChanged");
		this.cctClassNowCheckedException = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "classNowCheckedException");
		this.cctClassLessAccessible = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "classLessAccessible");
		this.cctSuperclassRemoved = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "superclassRemoved");
		this.cctSuperclassAdded = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "superclassAdded");
		this.cctSuperclassModifiedIncompatible = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "superclassModifiedIncompatible");
		this.cctInterfaceAdded = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "interfaceAdded");
		this.cctInterfaceRemoved = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "interfaceRemoved");
		this.cctMethodRemoved = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodRemoved");
		this.cctMethodRemovedInSuperclass = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodRemovedInSuperclass");
		this.cctMethodLessAccessible = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodLessAccessible");
		this.cctMethodLessAccessibleThanInSuperclass = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodLessAccessibleThanInSuperclass");
		this.cctMethodIsStaticAndOverridesNotStatic = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodIsStaticAndOverridesNotStatic");
		this.cctMethodReturnTypeChanged = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodReturnTypeChanged");
		this.cctMethodNowAbstract = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodNowAbstract");
		this.cctMethodNowFinal = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodNowFinal");
		this.cctMethodNowStatic = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodNowStatic");
		this.cctMethodNoLongerStatic = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodNoLongerStatic");
		this.cctMethodAddedToInterface = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodAddedToInterface");
		this.cctMethodNowThrowsCheckedException = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodNowThrowsCheckedException");
		this.cctMethodAbstractAddedToClass = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodAbstractAddedToClass");
		this.cctMethodAbstractAddedInSuperclass = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodAbstractAddedInSuperclass");
		this.cctMethodAbstractAddedInImplementedInterface = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodAbstractAddedInImplementedInterface");
		this.cctMethodNewDefault = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodNewDefault");
		this.cctMethodAbstractNowDefault = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "methodAbstractNowDefault");
		this.cctFieldStaticAndOverridesStatic = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldStaticAndOverridesStatic");
		this.cctFieldLessAccessibleThanInSuperclass = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldLessAccessibleThanInSuperclass");
		this.cctFieldNowFinal = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldNowFinal");
		this.cctFieldNowStatic = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldNowStatic");
		this.cctFieldNoLongerStatic = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldNoLongerStatic");
		this.cctFieldTypeChanged = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldTypeChanged");
		this.cctFieldRemoved = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldRemoved");
		this.cctFieldRemovedInSuperclass = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldRemovedInSuperclass");
		this.cctFieldLessAccessible = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "fieldLessAccessible");
		this.cctConstructorRemoved = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "constructorRemoved");
		this.cctConstructorLessAccessible = typeFactory.constructor(typeStore, compatibilityChangeTypeADT, "constructorLessAccessible");
		this.classTypeAnnotation = typeFactory.constructor(typeStore, classTypeADT, "annotation");
		this.classTypeInterface = typeFactory.constructor(typeStore, classTypeADT, "interface");
		this.classTypeClass = typeFactory.constructor(typeStore, classTypeADT, "class");
		this.classTypeEnum = typeFactory.constructor(typeStore, classTypeADT, "enum");
		this.modifierPublic = typeFactory.constructor(typeStore, modifierADT, "public");
		this.modifierPrivate = typeFactory.constructor(typeStore, modifierADT, "private");
		this.modifierProtected = typeFactory.constructor(typeStore, modifierADT, "protected");
		this.modifierPackageProtected = typeFactory.constructor(typeStore, modifierADT, "packageProtected");
		this.modifierFinal = typeFactory.constructor(typeStore, modifierADT, "final");
		this.modifierNonFinal = typeFactory.constructor(typeStore, modifierADT, "nonFinal");
		this.modifierStatic = typeFactory.constructor(typeStore, modifierADT, "static");
		this.modifierNonStatic = typeFactory.constructor(typeStore, modifierADT, "nonStatic");
		this.modifierAbstract = typeFactory.constructor(typeStore, modifierADT, "abstract");
		this.modifierNonAbstract = typeFactory.constructor(typeStore, modifierADT, "nonAbstract");
		this.modifierSynthetic = typeFactory.constructor(typeStore, modifierADT, "synthetic");
		this.modifierNonSynthetic = typeFactory.constructor(typeStore, modifierADT, "nonSynthetic");
		this.modifierBridge = typeFactory.constructor(typeStore, modifierADT, "bridge");
		this.modifierNonBridge = typeFactory.constructor(typeStore, modifierADT, "nonBridge");
	}
}
